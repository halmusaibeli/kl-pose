%ifndef pose_h
%define pose_h

%include namespace.m

%define prog_name pose
%define prog_name_alias pose

--functions
declare_function(prog_name,solveIK,prog_name_alias,solveIK)
ROUTINE pose__solveIK(pose_in: XYZWPR; grp_no : INTEGER) : JOINTPOS FROM pose
declare_function(prog_name,solveK,prog_name_alias,solveK)
ROUTINE pose__solveK(jpos: JOINTPOS; grp_no : INTEGER) : XYZWPR FROM pose

--setters
declare_function(prog_name,set_userframe,prog_name_alias,setUF)
ROUTINE pose__set_userframe(frm_no, grp_no : INTEGER) FROM pose
declare_function(prog_name,set_toolframe,prog_name_alias,setUT)
ROUTINE pose__set_toolframe(frm_no, grp_no : INTEGER) FROM pose
--update
declare_function(prog_name,update_uframe,prog_name_alias,updtUF)
ROUTINE pose__update_uframe(frame : XYZWPR; frm_no, grp_no : INTEGER) FROM pose
declare_function(prog_name,update_utool,prog_name_alias,updtUT)
ROUTINE pose__update_utool(frame : XYZWPR; frm_no, grp_no : INTEGER) FROM pose

-- setters
declare_function(prog_name,set_config,prog_name_alias,setcfg)
ROUTINE pose__set_config(conf_str : STRING) : CONFIG FROM pose
declare_function(prog_name,replace_config,prog_name_alias,rplcfg)
ROUTINE pose__replace_config(p : XYZWPR; conf : CONFIG) : XYZWPR FROM pose
-- use array
declare_function(prog_name,set_jointpos,prog_name_alias,setjnt)
ROUTINE pose__set_jointpos(arr: ARRAY[*] OF REAL) : JOINTPOS FROM pose
declare_function(prog_name,zero_jointpos,prog_name_alias,zrojnt)
ROUTINE pose__zero_jointpos : JOINTPOS FROM pose
-- update single axis
declare_function(prog_name,set_jointpos_axis,prog_name_alias,setajnt)
ROUTINE pose__set_jointpos_axis(pose : JOINTPOS; axs : INTEGER; ang : REAL) : JOINTPOS FROM pose
--use string instead of array
declare_function(prog_name,set_jointpos_str,prog_name_alias,setsjnt)
ROUTINE pose__set_jointpos_str(pose_in : STRING) : JOINTPOS FROM pose
-- use array
declare_function(prog_name,set_xyzwpr,prog_name_alias,setxyz)
ROUTINE pose__set_xyzwpr(arr: ARRAY[*] OF REAL; conf_str : STRING) : XYZWPR FROM pose
--use string instead of array
declare_function(prog_name,set_xyzwpr_str,prog_name_alias,setsxyz)
ROUTINE pose__set_xyzwpr_str(pose_in : STRING; conf_str : STRING) : XYZWPR FROM pose

declare_function(prog_name,set_posreg_xyz,prog_name_alias,setprx)
ROUTINE pose__set_posreg_xyz(pose_in : XYZWPR ; reg_no, grp_no : INTEGER) FROM pose
declare_function(prog_name,set_posreg_xyz_ext,prog_name_alias,setprxe)
ROUTINE pose__set_posreg_xyz_ext(pose_in : XYZWPREXT ; reg_no, grp_no : INTEGER) FROM pose
declare_function(prog_name,set_posreg_joint,prog_name_alias,setprj)
ROUTINE pose__set_posreg_joint(pose_in : JOINTPOS ; reg_no, grp_no : INTEGER) FROM pose

declare_function(prog_name,mask_posreg_xyz,prog_name_alias,mskprx)
ROUTINE pose__mask_posreg_xyz(x : REAL; y : REAL; z : REAL ; reg_no : INTEGER ; grp_no : INTEGER) FROM pose
declare_function(prog_name,mask_posreg_orient,prog_name_alias,mskpro)
ROUTINE pose__mask_posreg_orient(w : REAL; p : REAL; r : REAL ; reg_no : INTEGER ; grp_no : INTEGER) FROM pose

declare_function(prog_name,set_vector_to_posreg,prog_name_alias,stvcpr)
ROUTINE pose__set_vector_to_posreg(vec : VECTOR ; reg_no : INTEGER) FROM pose

-- getters
declare_function(prog_name,get_userframe,prog_name_alias,getUF)
ROUTINE pose__get_userframe(grp_no : INTEGER) : XYZWPR FROM pose
declare_function(prog_name,get_toolframe,prog_name_alias,getUT)
ROUTINE pose__get_toolframe(grp_no : INTEGER) : XYZWPR FROM pose
declare_function(prog_name,get_lpos,prog_name_alias,getlpos)
ROUTINE pose__get_lpos(grp_no : INTEGER) : XYZWPR FROM pose
declare_function(prog_name,get_jpos,prog_name_alias,getjpos)
ROUTINE pose__get_jpos(grp_no : INTEGER) : JOINTPOS FROM pose
declare_function(prog_name,get_posreg_rep,prog_name_alias,gtprrep)
ROUTINE pose__get_posreg_rep(reg_no, grp_no : INTEGER) : INTEGER FROM pose
declare_function(prog_name,get_posreg_xyz,prog_name_alias,gtprxyz)
ROUTINE pose__get_posreg_xyz(reg_no, grp_no : INTEGER) : XYZWPR FROM pose
declare_function(prog_name,get_posreg_joint,prog_name_alias,gtprjnt)
ROUTINE pose__get_posreg_joint(reg_no, grp_no : INTEGER) : JOINTPOS FROM pose
declare_function(prog_name,get_ok,prog_name_alias,getok)
ROUTINE pose__get_ok : BOOLEAN FROM pose
declare_function(prog_name,get_orientation,prog_name_alias,getwpr)
ROUTINE pose__get_orientation(pose : XYZWPR) : VECTOR FROM pose

-- conversions
-- pass out_arr by reference. If return type controller throws 
-- "550 Axis Configuration mismatch"
declare_function(prog_name,jpos_to_jpos2,prog_name_alias,cnvjps2)
ROUTINE pose__jpos_to_jpos2(pose : JOINTPOS) : JOINTPOS2 FROM pose
declare_function(prog_name,jpos_to_jpos3,prog_name_alias,cnvjps3)
ROUTINE pose__jpos_to_jpos3(pose : JOINTPOS) : JOINTPOS3 FROM pose
declare_function(prog_name,jpos_to_jpos6,prog_name_alias,cnvjps6)
ROUTINE pose__jpos_to_jpos6(pose : JOINTPOS) : JOINTPOS6 FROM pose
declare_function(prog_name,jpos_add,prog_name_alias,jposadd)
ROUTINE pose__jpos_add(J1 : JOINTPOS; J2 : JOINTPOS) : JOINTPOS FROM pose
declare_function(prog_name,jpos_sub,prog_name_alias,jpossub)
ROUTINE pose__jpos_sub(J1 : JOINTPOS; J2 : JOINTPOS) : JOINTPOS FROM pose
declare_function(prog_name,matrix_to_cart,prog_name_alias,mat2xyz)
ROUTINE pose__matrix_to_cart(reg_no : INTEGER; grp_no : INTEGER) FROM pose
declare_function(prog_name,pose_to_vector,prog_name_alias,pos2vec)
ROUTINE pose__pose_to_vector(pose : XYZWPR) : VECTOR FROM pose
declare_function(prog_name,pose_to_orient,prog_name_alias,pos2orn)
ROUTINE pose__pose_to_orient(pose : XYZWPR) : VECTOR FROM pose
declare_function(prog_name,replace_orient,prog_name_alias,rplorn)
ROUTINE pose__replace_orient(pose : XYZWPR; orient : VECTOR) : XYZWPR FROM pose
declare_function(prog_name,vector_to_pose,prog_name_alias,vec2pos)
ROUTINE pose__vector_to_pose(v : VECTOR ; orient : VECTOR; cnf : CONFIG) : XYZWPR FROM pose
declare_function(prog_name,norm,prog_name_alias,norm)
ROUTINE pose__norm(v : VECTOR) : VECTOR FROM pose
declare_function(prog_name,dot,prog_name_alias,dot)
ROUTINE pose__dot(v1 : VECTOR; v2 : VECTOR) : REAL FROM pose

declare_member(prog_name,cylindrical_to_cartesian,prog_name,cyl2crt)
--cyl_pose is the cylindrical coordinates (theta,z,r)
ROUTINE pose__cylindrical_to_cartesian(origin : XYZWPR;  cyl_pose : XYZWPR; z_axis : INTEGER) : XYZWPR FROM pose
declare_member(prog_name,cylindrical_to_cartesian_vector,prog_name,cy2ctv)
ROUTINE pose__cylindrical_to_cartesian_vector(theta : REAL ; theta_hat : REAL ; rad_hat : REAL ; z_hat : REAL; vecAxis : INTEGER) : VECTOR FROM pose
declare_member(prog_name,cartesian_to_cylindrical,prog_name,crt2cyl)
ROUTINE pose__cartesian_to_cylindrical(origin : XYZWPR;  cart_pose : XYZWPR; z_axis : INTEGER; radius : REAL; use_mm : BOOLEAN) : XYZWPR FROM pose
declare_member(prog_name,polar_to_cartesian,prog_name,pol2crt)
--pol_pose is the polar coordinates (theta,rho,r)
ROUTINE pose__polar_to_cartesian(origin : XYZWPR;  pol_pose : XYZWPR; z_axis : INTEGER) : XYZWPR FROM pose
declare_member(prog_name,cylinder_surf_to_origin,prog_name,csrforg)
ROUTINE pose__cylinder_surf_to_origin(pos : XYZWPR;  n_pol : VECTOR) : XYZWPR FROM pose

-- pose operations
declare_function(prog_name,add_jpos,prog_name_alias,addjpos)
ROUTINE pose__add_jpos(pose1 : JOINTPOS ; pose2 : JOINTPOS) : JOINTPOS FROM pose
declare_function(prog_name,distance,prog_name_alias,dist)
ROUTINE pose__distance(pose1 : XYZWPR ; pose2 : XYZWPR) : REAL FROM pose

--frame creation
-- create plane from normal.
declare_function(prog_name,create_frame_from_normal,prog_name_alias,frmapr)
ROUTINE pose__create_frame_from_normal(p1: VECTOR; p2 : VECTOR; parentfrm : XYZWPR) : XYZWPR FROM pose
declare_function(prog_name,correctFrame,prog_name_alias,crrFrm)
ROUTINE pose__correctFrame(crrAixsNo: INTEGER; p1: XYZWPR; p2: XYZWPR) : XYZWPR FROM pose

--vector calculations
--pose.klt, or pose_structs.klt needs to be declared to use.
%ifdef pose_structs_t
declare_function(prog_name,find_circle_center,prog_name_alias,circtr)
ROUTINE pose__find_circle_center(points : ARRAY[*] OF VECTOR) : VECTOR FROM pose
declare_function(prog_name,find_circumcenter,prog_name_alias,circum)
ROUTINE pose__find_circumcenter(p1, p2, p3 : VECTOR) : T_CIRCLE FROM pose
%endif
declare_function(prog_name,line_increment,prog_name_alias,lninc)
ROUTINE pose__line_increment(p1, p2 : VECTOR; fraction : REAL) : VECTOR FROM pose
declare_function(prog_name,vector_to_euler,prog_name_alias,veceul)
ROUTINE pose__vector_to_euler(vi : REAL; vj : REAL; vk : REAL; vectorAxis : INTEGER) : VECTOR FROM pose
declare_function(prog_name,vector_to_euler2,prog_name_alias,veceul2)
ROUTINE pose__vector_to_euler2(v : VECTOR; vectorAxis : INTEGER) : VECTOR FROM pose
declare_function(prog_name,vector_to_euler_cylindrical,prog_name_alias,vcelcy)
-- warning:: This function modifies the 'tangent' variable. If mutability
--           is not desired encase argument in () brackets to copy.
ROUTINE pose__vector_to_euler_cylindrical(tangent : VECTOR; theta : REAL) : VECTOR FROM pose

%endif --pose_h