PROGRAM pose
%NOBUSYLAMP
%COMMENT = ''
%UNINITVARS
%NOLOCKGROUP
%NOPAUSE = COMMAND + TPENABLE + ERROR

%include define_type.m

%include matarr.klt
t_arr2d_ref(t_rows,t_columns,t_matarr,inner_type)

%include systemvars.klt
%include errors.klt
%include pose.klt
%include quaternion.klt
%include shapes.klt
%include math.klt

%ifdef DEBUG_BUILD
%include display.c.klt
%endif

%define EPSILON 0.005

VAR
    ok : BOOLEAN
    cur_ufnum : INTEGER
    cur_utnum : INTEGER
    prev_ufnum : INTEGER
    prev_utnum : INTEGER

%from errors.klh %import karelError, CHK_STAT
%from systemlib.klh %import VEC
%include strings.klh
%include math.klh
%include matrix.klh
%include shapes.klh
%include posetp.klh
%include pose.klh
%include quaternion.klh

%ifdef DEBUG_BUILD
%from display.klh %import clear, show

-- user display log
%class usrdis('dispclass.klc','dispclass.klh')

%endif

BEGIN
END pose

--private

--***********
-- functions
--***********

ROUTINE pose__solveIK
-- -----------
-- in: pose_in (XYZWPR), grp_no
-- return: JOINTPOS
-- desc: run IK routine on XYZWPR type to get joint angles
-- -----------
  VAR
      jpos : JOINTPOS
      jpos_ref : JOINTPOS
      wjnt_cfg : CONFIG
      ext_ax : ARRAY[*] OF REAL
      STATUS : INTEGER
      frame, tool : XYZWPR
  BEGIN
      -- update karel frames
      frame = pose__get_userframe(grp_no)
      tool = pose__get_toolframe(grp_no)
      -- get current joint rep
      jpos_ref = pose__get_jpos(grp_no) -- needed for POS2JOINT built-in
      wjnt_cfg = pose_in.config_data
      -- run IK
      POS2JOINT(jpos_ref, (pose_in), $uframe, $utool, FULL_SOLN, wjnt_cfg, ext_ax, jpos, STATUS)
      
      IF (STATUS <> 0) THEN
          ok = FALSE

          IF UNINIT(jpos) THEN
            jpos = s_to_joint('0,0,0,0,0,0', ',')
          ELSE
            CHK_STAT(STATUS)
          ENDIF
      ENDIF

      RETURN(jpos)
  END pose__solveIK

ROUTINE pose__solveK
-- -----------
-- in: jpos (JOINTPOS), grp_no
-- return: XYZWPR
-- desc: run kinematics routine on jpos
-- -----------
  VAR
      pose : POSITION
      pose2 : XYZWPR
      wjnt_cfg : CONFIG
      ext_ax : ARRAY[*] OF REAL
      STATUS : INTEGER
      frame, tool : XYZWPR
  BEGIN
      -- update karel frames
      frame = pose__get_userframe(grp_no)
      tool = pose__get_toolframe(grp_no)
      JOINT2POS((jpos), $uframe, $utool, FULL_SOLN, pose, wjnt_cfg, ext_ax, STATUS)

      IF (STATUS <> 0) THEN
          ok = FALSE

          IF UNINIT(pose) THEN
            pose2.x = 0; pose2.y = 0; pose2.z = 0; pose2.w = 0; pose2.p = 0; pose2.r =0;
          ELSE
            CHK_STAT(STATUS)
          ENDIF

          RETURN(pose2)
      ELSE
        --convert into XYZWPR
        pose2 = pose
        RETURN(pose2)
      ENDIF
  END pose__solveK

--***********
-- setters
--***********

ROUTINE pose__set_userframe
-- -----------
-- in: frm_no, grp_no
-- out:
-- desc: Set uframe to 'frm_no'. If grp_no > 0 only frame 
--       of group is changed.
-- -----------
  VAR
      entry : INTEGER
      STATUS : INTEGER
  BEGIN
      ok = TRUE
      --record previous frame number
      -- for reference
      GET_VAR(entry, '*SYSTEM*', '$MNUFRAMENUM['+i_to_s(grp_no)+']', prev_ufnum, status)
      -- if grp is not initialized default to group 1
      IF (grp_no = 0) OR (UNINIT(grp_no)) THEN
          grp_no = 1
      ENDIF

      -- store current frame number in attr
      cur_ufnum = frm_no
      $MNUFRAMENUM[grp_no] = frm_no
      -- change to frame number, frm_no

      -- ..DANGER:: This is assuming the robot is on Group 1
      IF grp_no = 1 THEN
        IF frm_no = 0 THEN 
            $UFRAME = $MOR_GRP[1].$NILPOS
        ELSE
            $UFRAME = $MNUFRAME[1,frm_no]
        ENDIF
      ENDIF
  END pose__set_userframe


ROUTINE pose__set_toolframe
-- -----------
-- in: frm_no, grp_no
-- out:
-- desc: Set utool to 'frm_no'. If grp_no > 0 only frame 
--       of group is changed. If grp_no is uninitialized
--       or 0, will change to 'frm_no' for all groups.
-- -----------
  VAR
      entry : INTEGER
      STATUS : INTEGER
  BEGIN
      ok = TRUE
      --record previous frame
      GET_VAR(entry, '*SYSTEM*', '$MNUTOOLNUM['+i_to_s(grp_no)+']', prev_utnum, status)
      -- if grp is not initialized default to group 1
      IF (grp_no = 0) OR (UNINIT(grp_no)) THEN
          grp_no = 1
      ENDIF

      -- store current frame number in attr
      cur_utnum = frm_no
      $MNUTOOLNUM[grp_no] = frm_no
      -- change to frame number, frm_no
      
      -- ..DANGER:: This is assuming the robot is on Group 1
      IF grp_no = 1 THEN
        IF frm_no = 0 THEN
            $UTOOL = $MOR_GRP[1].$NILPOS
        ELSE
            $UTOOL = $MNUTOOL[1,frm_no]
        ENDIF
      ENDIF
  END pose__set_toolframe

ROUTINE pose__update_uframe
  BEGIN
      ok = TRUE
      --sanity check frame number and group number
      --arguments
      IF (grp_no = 0) OR (UNINIT(grp_no)) THEN
          grp_no = 1
      ENDIF

      IF (frm_no = 0) OR (UNINIT(frm_no)) THEN
          ok = FALSE
          WRITE TPERROR (CR, 'Frame number is not set')
      ENDIF
      -- set xyzwpr to frame number
      $MNUFRAME[grp_no,frm_no] = frame
      -- make this frame the current frame
      pose__set_userframe(frm_no, grp_no)
  END pose__update_uframe

ROUTINE pose__update_utool
  BEGIN
      ok = TRUE
      --sanity check frame number and group number
      --arguments
      IF (grp_no = 0) OR (UNINIT(grp_no)) THEN
          grp_no = 1
      ENDIF

      IF (frm_no = 0) OR (UNINIT(frm_no)) THEN
          ok = FALSE
          WRITE TPERROR (CR, 'Tool number is not set')
      ENDIF
      -- set xyzwpr to frame number
      $MNUTOOL[grp_no,frm_no] = frame
      -- make this frame the current frame
      pose__set_toolframe(frm_no, grp_no)
  END pose__update_utool


ROUTINE pose__set_config
  VAR
    cnfg : CONFIG
    STATUS : INTEGER
  BEGIN
    CNV_STR_CONF(conf_str, cnfg, STATUS)
    CHK_STAT(STATUS)
    IF (STATUS <> 0) THEN
        ok = FALSE
    ENDIF

    RETURN(cnfg)
  END pose__set_config

ROUTINE pose__replace_config
  BEGIN
    RETURN(POS(p.x, p.y, p.z, p.w, p.p, p.r, conf))
  END pose__replace_config


ROUTINE pose__set_jointpos
  VAR
    joint_pose : JOINTPOS
    STATUS : INTEGER
    i : INTEGER
    r_joints : ARRAY[9] OF REAL
  BEGIN
    ok = TRUE

    r_joints = (ZEROARR)

    FOR i=1 TO ARRAY_LEN(arr) DO
      r_joints[i] = arr[i]
    ENDFOR

    CNV_REL_JPOS(r_joints, joint_pose, STATUS)
    CHK_STAT(STATUS)
    IF STATUS <> 0 THEN
        ok = FALSE
    ENDIF

    RETURN(joint_pose)
  END pose__set_jointpos

ROUTINE pose__zero_jointpos
  VAR
    joint_pose : JOINTPOS
    arr: ARRAY[9] OF REAL
    i, status : INTEGER
  BEGIN
    FOR i=1 TO ARRAY_LEN(arr) DO
      arr[i] = 0
    ENDFOR

    CNV_REL_JPOS(arr, joint_pose, status)

    RETURN(joint_pose)
  END pose__zero_jointpos

ROUTINE pose__set_jointpos_axis
  VAR
    joint_pose : JOINTPOS
    arr: ARRAY[9] OF REAL
    i : INTEGER
    status : INTEGER
  BEGIN
    IF UNINIT(pose) THEN
      pose = pose__zero_jointpos
      CNV_JPOS_REL(pose, arr, status)
      CHK_STAT(status)
    ELSE
      CNV_JPOS_REL(pose, arr, status)
      CHK_STAT(status)
      FOR i=1 TO ARRAY_LEN(arr) DO
        IF UNINIT(arr[i]) THEN
          arr[i] = 0
        ENDIF
      ENDFOR
    ENDIF

    arr[axs] = ang
    CNV_REL_JPOS(arr, joint_pose, status)
    CHK_STAT(status)

    RETURN(joint_pose)
  END pose__set_jointpos_axis

ROUTINE pose__set_jointpos_str
  BEGIN
    RETURN(s_to_joint(pose_in, ','))
  END pose__set_jointpos_str


ROUTINE pose__set_xyzwpr
-- -----------
-- in: pose_in (ARRAY[6] OF REAL), conf_str (STRING[25])
-- desc: convert into XYZWPR type
-- -----------
  VAR
      pose : XYZWPR
  BEGIN
      ok = TRUE
      --store array into xyzwpr data type
      pose.x = arr[1]
      pose.y = arr[2]
      pose.z = arr[3]
      pose.w = arr[4]
      pose.p = arr[5]
      pose.r = arr[6]
      -- convert config string into config type
      pose.config_data = pose__set_config(conf_str)

      RETURN(pose)
      
  END pose__set_xyzwpr

ROUTINE pose__set_xyzwpr_str
  VAR
    pose : XYZWPR
    status : INTEGER
  BEGIN
    pose = s_to_xyzwpr(pose_in, ',')
    pose.config_data = pose__set_config(conf_str)

    RETURN(pose)

  END pose__set_xyzwpr_str


ROUTINE pose__set_posreg_xyz
-- -----------
-- in: pose_in (XYZWPR), reg_no, grp_no
-- out:
-- desc: set posreg 'reg_no' for group 'grp_no'
--       if no group is set, sets posreg for group 1.
--       wrapper for SET_POS_REG built-in. 
--       independant of pose class.
-- -----------
  VAR
      STATUS : INTEGER
  BEGIN
      ok = TRUE
      --default to 1 if group number is not set
      IF (grp_no = 0) OR UNINIT(grp_no) THEN
          grp_no = 1
      ENDIF

      IF (reg_no <= 0) THEN
          WRITE TPERROR (CR, 'position register must be > 0')
          ok = FALSE
      ELSE
          SET_POS_REG(reg_no, (pose_in), STATUS, grp_no)
          CHK_STAT(STATUS)
          IF (STATUS <> 0) THEN
              ok = FALSE
          ENDIF
      ENDIF
  END pose__set_posreg_xyz

ROUTINE pose__set_posreg_xyz_ext
-- -----------
-- in: pose_in (XYZWPREXT), reg_no, grp_no
-- out:
-- desc: set posreg 'reg_no' for group 'grp_no'
--       if no group is set, sets posreg for group 1.
--       wrapper for SET_POS_REG built-in. 
--       independant of pose class.
-- -----------
  VAR
      STATUS : INTEGER
  BEGIN
      ok = TRUE
      --default to 1 if group number is not set
      IF (grp_no = 0) OR UNINIT(grp_no) THEN
          grp_no = 1
      ENDIF

      IF (reg_no <= 0) THEN
          WRITE TPERROR (CR, 'position register must be > 0')
          ok = FALSE
      ELSE
          SET_POS_REG(reg_no, (pose_in), STATUS, grp_no)
          CHK_STAT(STATUS)
          IF (STATUS <> 0) THEN
              ok = FALSE
          ENDIF
      ENDIF
  END pose__set_posreg_xyz_ext

ROUTINE pose__mask_posreg_orient
-- -----------
-- in: pose_in (XYZWPREXT), reg_no, grp_no
-- out:
-- desc: set posreg 'reg_no' for group 'grp_no'
--       if no group is set, sets posreg for group 1.
--       wrapper for SET_POS_REG built-in. 
--       independant of pose class.
-- -----------
  VAR
      STATUS : INTEGER
      pose : XYZWPR
  BEGIN
      ok = TRUE
      --default to 1 if group number is not set
      IF (grp_no = 0) OR UNINIT(grp_no) THEN
          grp_no = 1
      ENDIF

      IF (reg_no <= 0) THEN
          WRITE TPERROR (CR, 'position register must be > 0')
          ok = FALSE
      ELSE
          -- get posreg
          pose = GET_POS_REG(reg_no, STATUS, grp_no)
          --mask in orientation
          pose.w = w
          pose.p = p
          pose.r = r
          --set position with mask
          SET_POS_REG(reg_no, (pose), STATUS, grp_no)
          CHK_STAT(STATUS)
          IF (STATUS <> 0) THEN
              ok = FALSE
          ENDIF
      ENDIF
  END pose__mask_posreg_orient

ROUTINE pose__mask_posreg_xyz
-- -----------
-- in: pose_in (XYZWPREXT), reg_no, grp_no
-- out:
-- desc: set posreg 'reg_no' for group 'grp_no'
--       if no group is set, sets posreg for group 1.
--       wrapper for SET_POS_REG built-in. 
--       independant of pose class.
-- -----------
  VAR
      STATUS : INTEGER
      pose : XYZWPR
  BEGIN
      ok = TRUE
      --default to 1 if group number is not set
      IF (grp_no = 0) OR UNINIT(grp_no) THEN
          grp_no = 1
      ENDIF

      IF (reg_no <= 0) THEN
          WRITE TPERROR (CR, 'position register must be > 0')
          ok = FALSE
      ELSE
          -- get posreg
          pose = GET_POS_REG(reg_no, STATUS, grp_no)
          --mask in orientation
          pose.x = x
          pose.y = y
          pose.z = z
          --set position with mask
          SET_POS_REG(reg_no, (pose), STATUS, grp_no)
          CHK_STAT(STATUS)
          IF (STATUS <> 0) THEN
              ok = FALSE
          ENDIF
      ENDIF
  END pose__mask_posreg_xyz


ROUTINE pose__set_posreg_joint
-- -----------
-- in: pose_in (ARRAY[9] OF REAL), reg_no, grp_no
-- out:
-- desc: set posreg 'reg_no' for group 'grp_no'
--       if no group is set, sets posreg for group 1.
--       wrapper for SET_POS_REG built-in. 
--       independant of pose class.
-- -----------
  VAR
      STATUS : INTEGER
  BEGIN
      ok = TRUE
      --default to 1 if group number is not set
      IF (grp_no = 0) OR UNINIT(grp_no) THEN
          grp_no = 1
      ENDIF

      IF (reg_no <= 0) THEN
          WRITE TPERROR (CR, 'position register must be > 0')
          ok = FALSE
      ELSE
          -- set jointpos to posreg
          SET_JPOS_REG(reg_no, (pose_in), STATUS, grp_no)
          CHK_STAT(STATUS)
          IF STATUS <> 0 THEN
              ok = FALSE
          ENDIF
      ENDIF
  END pose__set_posreg_joint

ROUTINE pose__set_vector_to_posreg
  VAR
    status : INTEGER
    p : XYZWPR
  BEGIN
    p = POS(vec.x, vec.y, vec.z, 0, 0, 0, (ZEROPOS(1).config_data))
    
    SET_POS_REG(reg_no, (p), status, 1)
    CHK_STAT(status)
  END pose__set_vector_to_posreg

--***********
-- getters
--***********

ROUTINE pose__get_userframe
-- -----------
-- in: grp_no 
-- out:
-- desc: gets current uframe and stores it in
--       pose object.
-- -----------
  VAR
      entry : INTEGER
      STATUS : INTEGER
  BEGIN
      ok = TRUE
      IF (grp_no = 0) OR UNINIT(grp_no) THEN
          grp_no = 1
      ENDIF

      IF (grp_no > $SCR.$NUM_GROUP) THEN
          ok = FALSE
          WRITE TPERROR (CR, 'group number is higher than available groups')
      ENDIF 
      -- if uframe = 0, frame is zeros
      -- if uframe > 0, set $uframe to current frame
      IF $MNUFRAMENUM[grp_no] = 0 THEN 
          cur_ufnum = 0
          $UFRAME = $MOR_GRP[grp_no].$NILPOS
      ELSE
          cur_ufnum = $MNUFRAMENUM[grp_no]
          $UFRAME = $MNUFRAME[grp_no,cur_ufnum]
      ENDIF

      RETURN($UFRAME)
  END pose__get_userframe


ROUTINE pose__get_toolframe
-- -----------
-- in: grp_no 
-- out:
-- desc: gets current utool and stores it in
--       pose object.
-- -----------
  VAR
      entry : INTEGER
      STATUS : INTEGER
  BEGIN
      ok = TRUE
      IF (grp_no = 0) OR UNINIT(grp_no) THEN
          grp_no = 1
      ENDIF
      -- check user input group number
      IF (grp_no > $SCR.$NUM_GROUP) THEN
          ok = FALSE
          WRITE TPERROR (CR, 'group number is higher than available groups')
      ENDIF
      -- lookup currently selected utool.
      -- if utool = 0, frame is zeros
      -- if utool > 0, $utool to current frame
      IF $MNUTOOLNUM[grp_no] = 0 THEN
          cur_utnum = 0
          $UTOOL = $MOR_GRP[grp_no].$NILPOS
      ELSE
          cur_utnum = $MNUTOOLNUM[grp_no]
          $UTOOL = $MNUTOOL[grp_no,cur_utnum]
      ENDIF

      RETURN($UTOOL)
  END pose__get_toolframe


ROUTINE pose__get_lpos
-- -----------
-- in: grp_no 
-- return: XYZWPR
-- desc: gets current linear position
-- -----------
  VAR
      lpos : XYZWPR
  BEGIN
      IF UNINIT(grp_no) THEN
          lpos = CURPOS(0, 0)
      ELSE
          lpos = CURPOS(0, 0, grp_no)
      ENDIF
      
      RETURN(lpos)
  END pose__get_lpos


ROUTINE pose__get_jpos
-- -----------
-- in: grp_no 
-- return: JOINTPOS6
-- desc: gets current joint position
-- -----------
  VAR
      jpos : JOINTPOS6
  BEGIN
      IF UNINIT(grp_no) THEN
          jpos = CURJPOS(0, 0)
      ELSE
          jpos = CURJPOS(0, 0, grp_no)
      ENDIF
      
      RETURN(jpos)
  END pose__get_jpos

ROUTINE pose__get_posreg_rep
  VAR
    pos_type : INTEGER
    num_axes  : INTEGER
    status : INTEGER
  BEGIN
    POS_REG_TYPE(reg_no, grp_no, pos_type, num_axes, status)

    -- abort out if something is wrong
    CHK_STAT(status)
    IF (status <> 0) THEN
        ok = FALSE
        karelError(POS_TYPE_MISMATCH,'pose type not set', ER_ABORT)
    ENDIF

    RETURN(pos_type)
  END pose__get_posreg_rep

ROUTINE pose__get_posreg_xyz
-- -----------
-- in: reg_no, grp_no
-- return: XYZWPR
-- desc: get posreg of group, grp_no, and return
-- it in a struct of POSEDATA.
-- -----------
  VAR
      pos_type : INTEGER
      num_axes  : INTEGER
      pose : XYZWPR
      STATUS : INTEGER
  BEGIN
      -- reset ok
      ok = TRUE
      -- see which representation the posreg is in
      POS_REG_TYPE(reg_no, grp_no, pos_type, num_axes, STATUS)
      
      -- abort out if something is wrong
      CHK_STAT(STATUS)
      IF (STATUS <> 0) THEN
          ok = FALSE
          karelError(POS_TYPE_MISMATCH,'pose type not set', ER_ABORT)
      ENDIF

      SELECT pos_type OF
          -- cartesian rep
          CASE (CC_POSITION,CC_XYZWPR,CC_EXT) :
              -- store cartesian representation
              pose = GET_POS_REG(reg_no, STATUS, grp_no)
              CHK_STAT(STATUS)
              IF STATUS <> 0 THEN
                  ok = FALSE
                  karelError(POS_REG_NOT_SET,'PR' + i_to_s(reg_no) + ' not set', ER_ABORT)
              ENDIF
              
              RETURN(pose)
          -- joint rep
          CASE (CC_JOINT) :
              ok = FALSE
              karelError(POS_TYPE_MISMATCH,'PR' + i_to_s(reg_no) + 'is joint type. Use joint routine variant.', ER_ABORT)
      ENDSELECT
  END pose__get_posreg_xyz

ROUTINE pose__get_posreg_joint
-- -----------
-- in: reg_no, grp_no
-- return: JOINTPOS
-- desc: get posreg of group, grp_no, and return
-- it in a struct of POSEDATA.
-- -----------
  VAR
      pos_type : INTEGER
      num_axes  : INTEGER
      pose : JOINTPOS
      STATUS : INTEGER
  BEGIN
      -- reset ok
      ok = TRUE
      -- see which representation the posreg is in
      POS_REG_TYPE(reg_no, grp_no, pos_type, num_axes, STATUS)
      
      -- abort out if something is wrong
      CHK_STAT(STATUS)
      IF (STATUS <> 0) THEN
          ok = FALSE
          karelError(POS_TYPE_MISMATCH,'pose type not set', ER_ABORT)
      ENDIF

      SELECT pos_type OF
          -- cartesian rep
          CASE (CC_POSITION,CC_XYZWPR,CC_EXT) :
              ok = FALSE
              karelError(POS_TYPE_MISMATCH,'PR' + i_to_s(reg_no) + 'is cartesian type. Use XYZ routine variant.', ER_ABORT)
          -- joint rep
          CASE (CC_JOINT) :
              -- get joint represenation of posreg
              pose = GET_JPOS_REG(reg_no, STATUS, grp_no)
              -- abort out if something is wrong
              CHK_STAT(STATUS)
              IF STATUS <> 0 THEN
                  ok = FALSE
                  RETURN(pose)
              ENDIF
              RETURN(pose)
      ENDSELECT
  END pose__get_posreg_joint

ROUTINE pose__get_ok
  BEGIN
    RETURN(ok)
  END pose__get_ok

ROUTINE pose__get_orientation
  VAR
    v : VECTOR
  BEGIN
    v.x = pose.w; v.y = pose.p; v.z = pose.r
    RETURN(v)
  END pose__get_orientation


ROUTINE pose__jpos_to_jpos2
  VAR
    arr : ARRAY[2] OF REAL
    status : INTEGER
    out_arr : JOINTPOS2
  BEGIN
    --extract into real array
    CNV_JPOS_REL(pose, arr, status)
    CHK_STAT(status)
    --store in different joint pose type
    CNV_REL_JPOS(arr, out_arr, status)
    CHK_STAT(status)

    RETURN(out_arr)
  END pose__jpos_to_jpos2


  ROUTINE pose__jpos_to_jpos3
    VAR
      arr : ARRAY[3] OF REAL
      status : INTEGER
      out_arr : JOINTPOS3
    BEGIN
      --extract into real array
      CNV_JPOS_REL(pose, arr, status)
      CHK_STAT(status)
      --store in different joint pose type
      CNV_REL_JPOS(arr, out_arr, status)
      CHK_STAT(status)

      RETURN(out_arr)
    END pose__jpos_to_jpos3

  ROUTINE pose__jpos_to_jpos6
    VAR
      arr : ARRAY[6] OF REAL
      status : INTEGER
      out_arr : JOINTPOS6
    BEGIN
      --extract into real array
      CNV_JPOS_REL(pose, arr, status)
      CHK_STAT(status)
      --store in different joint pose type
      CNV_REL_JPOS(arr, out_arr, status)
      CHK_STAT(status)

      RETURN(out_arr)
    END pose__jpos_to_jpos6

  ROUTINE jpos_opt(opt : INTEGER; J1 : JOINTPOS; J2 : JOINTPOS) : JOINTPOS
    VAR
      arr1 : ARRAY[9] OF REAL
      arr2 : ARRAY[9] OF REAL
      joint_pos : JOINTPOS
      i : INTEGER
      status : INTEGER
    BEGIN
      CNV_JPOS_REL(J1, arr1, status)
      CHK_STAT(status)
      CNV_JPOS_REL(J2, arr2, status)
      CHK_STAT(status)

      FOR i=1 TO ARRAY_LEN(arr1) DO
        IF UNINIT(arr1[i]) THEN arr1[i] = 0;
        ELSE IF UNINIT(arr2[i]) THEN arr1[i] = arr1[i]; 
        ELSE
          SELECT opt OF
          CASE(1):
            arr1[i] = arr1[i] + arr2[i];
          CASE(2):
            arr1[i] = arr2[i] - arr1[i];
          ELSE:
          ENDSELECT
        ENDIF
        ENDIF
      ENDFOR

      CNV_REL_JPOS(arr1, joint_pos, status)
      CHK_STAT(status)

      RETURN(joint_pos)

    END jpos_opt
  
  ROUTINE pose__jpos_add
    BEGIN
      RETURN(jpos_opt(1, J1, J2))
    END pose__jpos_add

  ROUTINE pose__jpos_sub
    BEGIN
      RETURN(jpos_opt(2, J1, J2))
    END pose__jpos_sub

  ROUTINE pose__matrix_to_cart
    VAR
      STATUS : INTEGER
      pose_in : XYZWPR
      pos_type, num_axes  : INTEGER
    BEGIN
      ok = TRUE
      --default to 1 if group number is not set
      IF (grp_no = 0) OR UNINIT(grp_no) THEN
          grp_no = 1
      ENDIF

      IF (reg_no <= 0) THEN
          WRITE TPERROR (CR, 'position register must be > 0')
          ok = FALSE
      ELSE
          --get matrix pos reg
          pose_in = pose__get_posreg_xyz(reg_no, grp_no)
          --convert to XYZWPR representation
          SET_POS_REG(reg_no, (pose_in), STATUS, grp_no)
          CHK_STAT(STATUS)
          IF (STATUS <> 0) THEN
              ok = FALSE
          ENDIF
      ENDIF
    END pose__matrix_to_cart


ROUTINE pose__pose_to_vector
  VAR
    v : VECTOR
  BEGIN
    v.x = pose.x ; v.y = pose.y ; v.z = pose.z
    RETURN(v)
  END pose__pose_to_vector

ROUTINE pose__pose_to_orient
  VAR
    v : VECTOR
  BEGIN
    v.x = pose.w ; v.y = pose.p ; v.z = pose.r
    RETURN(v)
  END pose__pose_to_orient

ROUTINE pose__replace_orient
  VAR
    p : XYZWPR
  BEGIN
    p = pose
    p.w = orient.x ; p.p = orient.y ; p.r = orient.z ;
    RETURN(p)
  END pose__replace_orient

ROUTINE pose__vector_to_pose
  VAR
    p : XYZWPR
  BEGIN
    p.x = v.x ; p.y = v.y; p.z = v.z;
    p.w = orient.x ; p.p = orient.y ; p.r = orient.z;
    p.config_data = cnf

    RETURN(p)
  END  pose__vector_to_pose

ROUTINE pose__norm
  BEGIN
    RETURN(v/math__norm(v))
  END pose__norm

ROUTINE pose__dot
    BEGIN
        RETURN(v1.x * v2.x + v1.y * v2.y + v1.z * v2.z)
    END pose__dot


ROUTINE pose__cylindrical_to_cartesian
  -- ..note:: This function only transforms the coordinate, not
  --          its orientation
  VAR
    v : VECTOR
    o : XYZWPR
  BEGIN
    --cyl_pose = (theta, r, z, theta_rot, r_rot, z_rot)
    --z_axis = 1:x , 2:y , 3:z, 4:vertical
    SELECT z_axis OF
      CASE(X_AXES):
        v.x = cyl_pose.y ; v.y= 0 ; v.z=cyl_pose.z ;
        o = math__translate(math__rotx((origin), cyl_pose.x), v )
      CASE(Y_AXES):
        v.x = 0 ; v.y= cyl_pose.y ; v.z=cyl_pose.z ;
        o = math__translate(math__roty((origin), cyl_pose.x), v )
      CASE(Z_AXES):
        v.x = 0 ; v.y=cyl_pose.y ; v.z=cyl_pose.z ;
        o = math__translate(math__rotz((origin), cyl_pose.x), v )
      CASE(VERT_AXES):
        v.x = 0 ; v.y=cyl_pose.z ; v.z=cyl_pose.y ;
        o = math__translate(math__rotz((origin), cyl_pose.x), v )
    ENDSELECT

    RETURN(o)
  
  END pose__cylindrical_to_cartesian


ROUTINE pose__cylindrical_to_cartesian_vector
  -- Takes a vector for cylindrical space (theta^^, radius^^, z^^), and converts it into
  -- a vector in cartesian space (i, j, k). Conversion depends on theta angle.
  VAR
    out : VECTOR
  BEGIN
    SELECT vecAxis OF
      CASE(X_AXES):
        out.x = SIN(theta)*rad_hat+COS(theta)*theta_hat
        out.y = COS(theta)*rad_hat-SIN(theta)*theta_hat
        out.z = z_hat
      CASE(Y_AXES):
        out.x = COS(theta)*rad_hat-SIN(theta)*theta_hat
        out.y = SIN(theta)*rad_hat+COS(theta)*theta_hat
        out.z = z_hat
      ELSE:
        karelError(INVALID_TYPE_CODE, 'cylindrical_to_cartesian_vector not implemented for vector axis ' + i_to_s(vecAxis), ER_ABORT)
    ENDSELECT

    RETURN (out)
  END pose__cylindrical_to_cartesian_vector


ROUTINE pose__cartesian_to_cylindrical
  -- ..note:: This function only transforms the coordinate, not
  --          its orientation
  VAR
    p : XYZWPR
    o : XYZWPR
  BEGIN

    --put position into center frame
    p = cart_pose

    -- (x,y,z) -> (theta,z,radius)
    --width radius as z height
    SELECT z_axis OF
      CASE(X_AXES):
        o.x = ATAN2(p.z, p.y)
        o.y = p.x
        o.z = SQRT(p.y*p.y + p.z*p.z)
      CASE(Y_AXES):
        o.x = ATAN2(p.z, p.x)
        o.y = p.y
        o.z = SQRT(p.x*p.x + p.z*p.z)
      CASE(Z_AXES):
        o.x = ATAN2(p.x, p.y)
        o.y = p.z
        o.z = SQRT(p.x*p.x + p.y*p.y)
      CASE(VERT_AXES):
        o.x = ATAN2(p.y, p.x)
        o.y = p.z
        o.z = SQRT(p.x*p.x + p.y*p.y)
    ENDSELECT

    o.w = 0 ; o.p = 0 ; o.r = 0 ;

    --change degrees to mm
    IF use_mm THEN
      o.x = (-1*o.x)*radius*M_PI/180
    ENDIF

    --put position into center frame
    RETURN(INV((origin)):o)

  END pose__cartesian_to_cylindrical

ROUTINE pose__polar_to_cartesian
  -- ..note:: This function only transforms the coordinate, not
  --          its orientation
  VAR
    v : VECTOR
    o : XYZWPR
  BEGIN
    --pol_pose = (theta, rho, z, theta_rot, rho_rot, z_rot)
    --z_axis = 1:x , 2:y , 3:z
    SELECT z_axis OF
      CASE(X_AXES):
        v.x = 0 ; v.y= 0 ; v.z=pol_pose.z ;
        o = math__translate(math__roty(math__rotz((origin), pol_pose.x), pol_pose.y), v )
      CASE(Y_AXES):
        v.x = 0 ; v.y= 0 ; v.z=pol_pose.z ;
        o = math__translate(math__rotx(math__rotz((origin), pol_pose.x + 180), pol_pose.y), v )
      CASE(Z_AXES):
        v.x = 0 ; v.y=pol_pose.z ; v.z=0 ;
        o = math__translate(math__rotx(math__roty((origin), pol_pose.x), pol_pose.y), v )
    ENDSELECT

    RETURN(o)
  
  END pose__polar_to_cartesian

ROUTINE pose__cylinder_surf_to_origin
  VAR
    v : VECTOR
  BEGIN
    --n_pol = (theta,r,z)
    v.x = 0 ; v.y=-1*n_pol.y ; v.z=-1*n_pol.z ;
    RETURN(math__rotz(math__translate(pos, v), -1*n_pol.x) )
  END pose__cylinder_surf_to_origin


--math operations
ROUTINE pose__add_jpos
  VAR
    arr1 : ARRAY[9] OF REAL
    arr2 : ARRAY[9] OF REAL
    out_arr : ARRAY[9] OF REAL
    out_jpos : JOINTPOS
    i, status : INTEGER
  BEGIN
    CNV_JPOS_REL(pose1, arr1, status)
    CHK_STAT(status)
    CNV_JPOS_REL(pose2, arr2, status)
    CHK_STAT(status)

    FOR i=1 TO ARRAY_LEN(arr1) DO
      IF (NOT UNINIT(arr1[i])) THEN
        IF (NOT UNINIT(arr2[i])) THEN
          out_arr[i] = arr1[i] + arr2[i]
        ELSE
          out_arr[i] = arr1[i]
        ENDIF
      ELSE
        out_arr[i] = 0
      ENDIF
    ENDFOR

    CNV_REL_JPOS(out_arr, out_jpos, status)
    CHK_STAT(status)

    RETURN(out_jpos)

  END pose__add_jpos

ROUTINE pose__distance
  BEGIN
    RETURN( math__norm(pose__pose_to_vector(pose2)-pose__pose_to_vector(pose1)) )
  END pose__distance

ROUTINE pose__create_frame_from_normal
  VAR
%define AXIS_LENGTH 10
%define SCALE_FACTOR 6
    approach,normal,orient : VECTOR
    orient_unit : VECTOR
    orientation : XYZWPR
    plane : T_PLANE
  BEGIN
    --normal vector
    normal = (p2-p1)

    --create perpendicular plane with p1 as the origin
    shapes__create_plane(p1, normal, plane)

    --make x-axis on plane
    orientation = pose__vector_to_pose(VEC(AXIS_LENGTH, 0, 0), VEC(0,0,0), (ZEROPOS(1).config_data))
%ifdef DEBUG_BUILD
    usrdis__print(DEBUG,'x-axis orientation:')
    usrdis__print(DEBUG,pose_to_s(orientation, ','))
%endif

    --x-axis should be colinear with the x-axis of the parent frame
    orient = shapes__project_point_on_plane(pose__pose_to_vector(orientation), plane)
    --convert to unit vector to avoid real overflow errors
    orient_unit = (orient-p1)/math__norm((orient-p1))

    --get y-axis vector

    --scale up unit vector so that vector is over AXIS_LENGTH in length
    -- minimum is 5mm in length
    IF (math__norm((plane.normal#orient_unit)) < AXIS_LENGTH) THEN
%ifdef DEBUG_BUILD
      usrdis__print(DEBUG,'Approach is scaled!')
%endif
      approach = p1 + SCALE_FACTOR*(plane.normal#orient_unit)
    ELSE
      approach = p1 + (plane.normal#orient_unit)
    ENDIF

%ifdef DEBUG_BUILD
    usrdis__print(DEBUG,'Origin Point:')
    usrdis__print(DEBUG,vec_to_s(p1, ','))
    usrdis__print(DEBUG,'Normal Point:')
    usrdis__print(DEBUG,vec_to_s(p2, ','))
    usrdis__print(DEBUG,'Normal:')
    usrdis__print(DEBUG,vec_to_s(plane.normal, ','))
    usrdis__print(DEBUG,'Orient:')
    usrdis__print(DEBUG,vec_to_s(orient, ','))
    usrdis__print(DEBUG,'Approach:')
    usrdis__print(DEBUG,vec_to_s(approach, ','))
%endif

    --Create a frame with builtin FRAME(origin,orient[x-axis],approach[xy-plane])
    --convert vectors to positions
    RETURN( parentfrm:posetp__framevec(p1, orient, approach) )
  END pose__create_frame_from_normal


ROUTINE lpIntersect(p1 : VECTOR; p2 : VECTOR; center : VECTOR; normal : VECTOR) : VECTOR 
    -- input: p1, p2, plane_center, plane_normal
    VAR
        u       : VECTOR
        d       : REAL
        w       : VECTOR
        f       : REAL
        eps     : REAL

    BEGIN
        eps = 0.000001

        -- unit vectors
        normal = pose__norm(normal)
        u  = pose__norm(p2 - p1)

        -- dot product
        d = pose__dot(u, normal)

        IF ABS(d) > eps THEN
            w = p1 - center            -- diff
            f = - (pose__dot(normal,w) / d)     -- factor
            u = f * u
            RETURN(p1 + u)
        ELSE
            karelError(0, 'segment is parallel to plane', 0)
        ENDIF
        
    END lpIntersect

ROUTINE pose__correctFrame

    VAR
        -- output
        corr_offset                     : XYZWPR

        align_axis                      : VECTOR
        align_vector                    : VECTOR
        cross_prdct                     : VECTOR
        dot_product                     : REAL
        rot_quat                        : T_QUAT
        norm_quat                       : T_QUAT
        orient_ofst                     : XYZWPR
        offset                          : XYZWPR
        vect_quat                       : T_QUAT
        new_rot_quat                    : T_QUAT
        quat_conj                       : T_QUAT
        rot_vector                      : T_QUAT
        pl_normal                       : VECTOR
        pl_center                       : VECTOR
        posit_ofst                      : VECTOR
        pt1                             : VECTOR
        pt2                             : VECTOR

    CONST
        X_AXIS = 1
        Y_AXIS = 2
        Z_AXIS = 3
    
    BEGIN
        --inputs: crrAxisNo, point1, point2
        --outputs: correction_offset

        -- There are two steps to correct frame: orientation and position corrections
        -- points should be wrt to the correction frame (local points).

        -- initialization
        corr_offset = ZEROPOS(1)
        offset = ZEROPOS(1)

        -- orientation correction: align frame axis to normal vector
            align_axis.x = 0
            align_axis.y = 0
            align_axis.z = 0
            
            -- select appropriate correction axis
            SELECT crrAixsNo OF
                CASE(X_AXIS):
                    align_axis.x = 1
                CASE(Y_AXIS):
                    align_axis.y = 1
                CASE(Z_AXIS):
                    align_axis.z = 1
            ENDSELECT
            
            -- get vector to align axis with
            align_vector = pose__pose_to_vector(posetp__sub(p2, p1))
            align_vector = pose__norm(align_vector)

            -- get rotation in quaternion
            cross_prdct = align_axis # align_vector
            dot_product = align_axis @ align_vector
            rot_quat = quaternion__set(1 + dot_product, cross_prdct.x, cross_prdct.y, cross_prdct.z)
            norm_quat = quaternion__normalize(rot_quat)
            orient_ofst = quaternion__quat_to_pose(norm_quat)

        -- position correction: find the intersection between line and plane
            -- construct plane center and normal
            pl_normal.x = 0; pl_normal.y = 0; pl_normal.z = 1
            pl_center.x = 0; pl_center.y = 0; pl_center.z = 0

            -- compute intersection
            pt1 = pose__pose_to_vector(p1)
            pt2 = pose__pose_to_vector(p2)
            posit_ofst = lpIntersect(pt1, pt2, pl_center, pl_normal)

        -- update position offset
        corr_offset.x = posit_ofst.x
        corr_offset.y = posit_ofst.y
        corr_offset.z = posit_ofst.z
        corr_offset.w = orient_ofst.w
        corr_offset.p = orient_ofst.p
        corr_offset.r = orient_ofst.r

        RETURN(corr_offset)

    END pose__correctFrame


ROUTINE pose__find_circle_center
  VAR
    circ : T_CIRCLE
  BEGIN
    IF ARRAY_LEN(points) = 3 THEN
      circ = pose__find_circumcenter(points[1], points[2], points[3])
      RETURN(circ.center)
    ELSE
      karelError(INVALID_TYPE_CODE, 'Solving circle center is not yet implemented for ' + i_to_s(ARRAY_LEN(points)) + ' points.', ER_ABORT)
    ENDIF
  END pose__find_circle_center

ROUTINE pose__find_circumcenter
  VAR
    circ : T_CIRCLE
    A, B, C, D : REAL
  BEGIN
    A = (p1.x * (p2.y - p3.y)) - (p1.y * (p2.x - p3.x)) + (p2.x * p3.y) - (p3.x * p2.y)

    IF ABS(A) < EPSILON THEN
      karelError(VAR_UNINIT, 'Points are collinear', ER_ABORT)
      RETURN(circ)
    ENDIF

    B = (p1.x * p1.x + p1.y * p1.y) * (p3.y - p2.y) + (p2.x * p2.x + p2.y * p2.y) * (p1.y - p3.y) + (p3.x * p3.x + p3.y * p3.y) * (p2.y - p1.y)
    C = (p1.x * p1.x + p1.y * p1.y) * (p2.x - p3.x) + (p2.x * p2.x + p2.y * p2.y) * (p3.x - p1.x) + (p3.x * p3.x + p3.y * p3.y) * (p1.x - p2.x)
    D = (p1.x * p1.x + p1.y * p1.y) * (p3.x * p2.y - p2.x * p3.y) + (p2.x * p2.x + p2.y * p2.y) * (p1.x * p3.y - p3.x * p1.y) + (p3.x * p3.x + p3.y * p3.y) * (p2.x * p1.y - p1.x * p2.y)

    circ.center.x = -B / (A * 2)
    circ.center.y = -C / (A * 2)
    circ.center.z = (p1.z + p2.z + p3.z)/3

    circ.radius = SQRT(((B * B) + (C * C) - (4 * A * D)) / (4 * A * A))

    RETURN(circ)
  END pose__find_circumcenter

ROUTINE pose__vector_to_euler
  VAR
    out : VECTOR
  BEGIN
    RETURN(pose__vector_to_euler2(VEC(vi, vj, vk), vectorAxis))
  END pose__vector_to_euler

ROUTINE pose__vector_to_euler2
  VAR
    align_axis, align_vector : VECTOR
    cross_prdct : VECTOR
    dot_product : REAL
    rot_quat    : T_QUAT
    norm_quat   : T_QUAT
    out_pose    : XYZWPR
  CONST
        X_AXIS = 1
        Y_AXIS = 2
        Z_AXIS = 3
  BEGIN
    align_axis.x = 0
    align_axis.y = 0
    align_axis.z = 0

    -- select appropriate correction axis
    SELECT vectorAxis OF
        CASE(X_AXIS):
            align_axis.x = 1
        CASE(Y_AXIS):
            align_axis.y = 1
        CASE(Z_AXIS):
            align_axis.z = 1
    ENDSELECT

    --normalize vector
    align_vector = v/math__norm(v)

    -- get rotation in quaternion
    cross_prdct = align_axis # align_vector
    dot_product = align_axis @ align_vector
    rot_quat = quaternion__set(1 + dot_product, cross_prdct.x, cross_prdct.y, cross_prdct.z)
    norm_quat = quaternion__normalize(rot_quat)
    out_pose = quaternion__quat_to_pose(norm_quat)

    RETURN(VEC(out_pose.w, out_pose.p, out_pose.r))
    
  END pose__vector_to_euler2


ROUTINE pose__line_increment
  BEGIN
    RETURN(p1 + (p2-p1)*fraction)
  END pose__line_increment

ROUTINE pose__vector_to_euler_cylindrical
  -- warning:: This function modifies the 'tangent' variable. If mutability
  --           is not desired encase argument in () brackets to copy.
  VAR
    out : VECTOR
    normal : VECTOR
    vecang : VECTOR
    torient : VECTOR
    norient : VECTOR
  BEGIN

    --assume normal is perpendicular to the cylindrical surface
    -- or along radius vector
    normal = tangent#VEC(0,0,-1)

    --convert cylindrical UV vector into cartesian space
    torient = pose__cylindrical_to_cartesian_vector(theta, tangent.x, tangent.z, tangent.y, X_AXES)
    norient = pose__cylindrical_to_cartesian_vector(theta, normal.x, normal.z, normal.y, X_AXES)

%ifdef DEBUG_BUILD
    usrdis__print(DEBUG,'----')
    usrdis__print(DEBUG,'cyl uvec:' + vec_to_s(tangent, ','))
    usrdis__print(DEBUG,'angle:' + r_to_s(theta))
    usrdis__print(DEBUG,'----')
    usrdis__print(DEBUG,'norm vec:' + vec_to_s(norient, ','))
    usrdis__print(DEBUG,'tang vec:' + vec_to_s(torient, ','))
%endif

    --get angle of tangent vector
    vecang = pose__vector_to_euler2(tangent, X_AXES)

%ifdef DEBUG_BUILD
      usrdis__print(DEBUG,'tan eul:' + vec_to_s(vecang, ','))
%endif
    --select unit circle quadrant
    --and transform pose so z is pointing to the origin of the circle

    -- DO NOT evaluate equality on REAL values!!!
    IF (vecang.z > 0-EPSILON) AND (vecang.z < 90-EPSILON) THEN

      out = pose__vector_to_euler2(torient, X_AXES)
%ifdef DEBUG_BUILD
      usrdis__print(DEBUG,'Quadrant 1 theta:' + r_to_s(vecang.z))
      usrdis__print(DEBUG,'euler vec:' + vec_to_s(out, ','))
%endif

%define XCYL_ALIGN_EULER POS(0,0,0,90,0,0,(ZEROPOS(1).config_data))
      out = pose__pose_to_orient(pose__vector_to_pose(VEC(0,0,0),(out),(ZEROPOS(1).config_data)):XCYL_ALIGN_EULER)

      tangent = torient
      RETURN(out)
    ENDIF

    IF (vecang.z > 90-EPSILON) AND (vecang.z < 180-EPSILON) THEN
      out = pose__vector_to_euler2(norient, X_AXES)
%ifdef DEBUG_BUILD
      usrdis__print(DEBUG,'Quadrant 2 theta:' + r_to_s(vecang.z))
      usrdis__print(DEBUG,'euler vec:' + vec_to_s(out, ','))
%endif

%define YCYL_ALIGN_EULER POS(0,0,0,0,-90,-90,(ZEROPOS(1).config_data))
      out = pose__pose_to_orient(pose__vector_to_pose(VEC(0,0,0),(out),(ZEROPOS(1).config_data)):YCYL_ALIGN_EULER)

      tangent = norient
      RETURN(out)
    ENDIF

    IF ((vecang.z < 180+EPSILON) AND (vecang.z > 180-EPSILON)) OR ((vecang.z > -180+EPSILON) AND (vecang.z < -90+EPSILON)) THEN
      out = pose__vector_to_euler2(torient, X_AXES)
%ifdef DEBUG_BUILD
      usrdis__print(DEBUG,'Quadrant 3 theta:' + r_to_s(vecang.z))
      usrdis__print(DEBUG,'euler vec:' + vec_to_s(out, ','))
%endif

%define MXCYL_ALIGN_EULER POS(0,0,0,-90,0,0,(ZEROPOS(1).config_data))
      out = pose__pose_to_orient(pose__vector_to_pose(VEC(0,0,0),(out),(ZEROPOS(1).config_data)):MXCYL_ALIGN_EULER)

      tangent = torient
      RETURN(out)
    ENDIF

    IF (vecang.z > -90+EPSILON) AND (vecang.z < 0-EPSILON) THEN
      out = pose__vector_to_euler2(torient, X_AXES)
%ifdef DEBUG_BUILD
      usrdis__print(DEBUG,'Quadrant 4 theta:' + r_to_s(vecang.z))
      usrdis__print(DEBUG,'euler vec:' + vec_to_s(out, ','))
%endif

%define MYCYL_ALIGN_EULER POS(0,0,0,90,0,0,(ZEROPOS(1).config_data))
      out = pose__pose_to_orient(pose__vector_to_pose(VEC(0,0,0),(out),(ZEROPOS(1).config_data)):MYCYL_ALIGN_EULER)    

      tangent = torient
      RETURN(out)
    ENDIF

    RETURN(out)

  END pose__vector_to_euler_cylindrical